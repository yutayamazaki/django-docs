{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"How Django Works. \u672c\u30b5\u30a4\u30c8\u3067\u306fPython\u306eWeb Application Framework\u3067\u3042\u308bDjango\u3068Django Rest Framework\u3092\u4e2d\u5fc3\u306b\uff0cDjango\u304c\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3057\u3066\u3044\u308b\u306e\u304b\u3092\u89e3\u8aac\u3059\u308b\uff0e \u5bfe\u8c61\u30d0\u30fc\u30b8\u30e7\u30f3 \u57fa\u672c\u7684\u306b\u306f\u5404\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6700\u65b0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u8a18\u8f09\u3059\u308b\uff0e\u305f\u3060\u3057\u5e38\u306b\u6700\u65b0\u306e\u72b6\u614b\u3092\u7dad\u6301\u3067\u304d\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u305f\u3081\uff0c\u5404\u30da\u30fc\u30b8\u306b\u6700\u7d42\u66f4\u65b0\u65e5\u3068\u305d\u306e\u65e5\u306e\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8a18\u8f09\u3059\u308b\uff0e \u53c2\u8003 django/django: The Web framework for perfectionists with deadlines. encode/django-rest-framework: Web APIs for Django. \ud83c\udfb8","title":"Home"},{"location":"#how-django-works","text":"\u672c\u30b5\u30a4\u30c8\u3067\u306fPython\u306eWeb Application Framework\u3067\u3042\u308bDjango\u3068Django Rest Framework\u3092\u4e2d\u5fc3\u306b\uff0cDjango\u304c\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3057\u3066\u3044\u308b\u306e\u304b\u3092\u89e3\u8aac\u3059\u308b\uff0e","title":"How Django Works."},{"location":"#_1","text":"\u57fa\u672c\u7684\u306b\u306f\u5404\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6700\u65b0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u8a18\u8f09\u3059\u308b\uff0e\u305f\u3060\u3057\u5e38\u306b\u6700\u65b0\u306e\u72b6\u614b\u3092\u7dad\u6301\u3067\u304d\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u305f\u3081\uff0c\u5404\u30da\u30fc\u30b8\u306b\u6700\u7d42\u66f4\u65b0\u65e5\u3068\u305d\u306e\u65e5\u306e\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8a18\u8f09\u3059\u308b\uff0e","title":"\u5bfe\u8c61\u30d0\u30fc\u30b8\u30e7\u30f3"},{"location":"#_2","text":"django/django: The Web framework for perfectionists with deadlines. encode/django-rest-framework: Web APIs for Django. \ud83c\udfb8","title":"\u53c2\u8003"},{"location":"references/","text":"References \u66f4\u65b0\u65e5 2020-11-27 Django v3.1.3 Django Rest Framework v3.12.2 Django\u3084\u305d\u306e\u5468\u8fba\u30c4\u30fc\u30eb\u306e\u5b9f\u88c5\u30fb\u7406\u89e3\u306b\u5f79\u7acb\u3064\u6587\u732e\u3092\u7d39\u4ecb\u3059\u308b\uff0e Django\u3067\u9759\u7684\u30d5\u30a1\u30a4\u30eb\u3068\u3046\u307e\u304f\u3084\u308b Django\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u3069\u3046\u3084\u3063\u3066\u4fdd\u5b58\u3057\u3066\u3044\u308b\u306e\u304b. | CreditEngine Tech | Medium","title":"Refenreces"},{"location":"references/#references","text":"\u66f4\u65b0\u65e5 2020-11-27 Django v3.1.3 Django Rest Framework v3.12.2 Django\u3084\u305d\u306e\u5468\u8fba\u30c4\u30fc\u30eb\u306e\u5b9f\u88c5\u30fb\u7406\u89e3\u306b\u5f79\u7acb\u3064\u6587\u732e\u3092\u7d39\u4ecb\u3059\u308b\uff0e Django\u3067\u9759\u7684\u30d5\u30a1\u30a4\u30eb\u3068\u3046\u307e\u304f\u3084\u308b Django\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u3069\u3046\u3084\u3063\u3066\u4fdd\u5b58\u3057\u3066\u3044\u308b\u306e\u304b. | CreditEngine Tech | Medium","title":"References"},{"location":"request/","text":"Request \u66f4\u65b0\u65e5 2020-11-27 Django v3.1.3 Django Rest Framework v3.12.2 Django\u306eRequest\u30af\u30e9\u30b9 Django\u306f\u53d7\u4fe1\u3057\u305fHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092 django.http.request.HTTPRequest \u3067\u53d7\u3051\u53d6\u308a\uff0c\u305d\u308c\u3092\u3082\u3068\u306bView\u3067\u306e\u51e6\u7406\u3092\u884c\u3046\uff0e Django\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308bAPI\u5b9f\u88c5\u306e\u4f8b\u304c\u4ee5\u4e0b\u306e\u300c\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308a\uff0c\u73fe\u5728\u6642\u523b\u3092\u542b\u3080html\u3092\u8fd4\u3059\u300d\u95a2\u6570\u3067\u3042\u308b\uff0e\u3053\u306e\u95a2\u6570\u306e\u5f15\u6570request\u306b\u5165\u308bHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u4e2d\u8eab\u3053\u305d\u304cDjango\u306e HTTPRequest \u3067\u3042\u308a\uff0cHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u4e2d\u8eab\u3092\u30d1\u30fc\u30b9\u3057\u3066Python\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u307e\u3068\u3081\u3042\u3052\u305f\u3082\u306e\u3067\u3042\u308b\uff0e from django.http import HttpResponse import datetime def current_datetime ( request ): now = datetime . datetime . now () html = \"<html><body>It is now %s .</body></html>\" % now return HttpResponse ( html ) HTTPRequest \u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u306b\u95a2\u3059\u308b\u8a73\u7d30\u306f \u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3092\u53c2\u7167\uff0e Django\u306eWSGIRequest\u304b\u3089Request\u304c\u30d1\u30fc\u30b9\u3055\u308c\u308b\u6d41\u308c\u3092\u77e5\u308b Django\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f PEP333 \u3067\u5b9a\u3081\u3089\u308c\u305fWSGI\u3068\u3044\u3046\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4ecb\u3057\u3066\u30b5\u30fc\u30d0\u30fc\u3068\u306e\u3084\u308a\u3068\u308a\u3092\u884c\u3046\uff0e\u305d\u306e\u969b\u306b\u5229\u7528\u3055\u308c\u308b\u306e\u304cDjango\u306e WSGIRequest \u3067\u3042\u308a WSGIServer \u3067\u3042\u308b\uff0e\u307e\u305f WSGIRequest \u306f HTTPRequest \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3042\u308b\uff0e WSGI\u306e\u4ed5\u69d8\u3092\u7c21\u5358\u306a\u30b3\u30fc\u30c9\u3092\u7528\u3044\u3066\u78ba\u8a8d\u3059\u308b\uff0e environ \u3068 start_response \u3068\u3044\u30462\u3064\u306e\u5f15\u6570\u3092\u6301\u3063\u305fCallable\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u7b2c2\u5f15\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u547c\u3073\u51fa\u3057\u3066status code\u3068header\u3092\u6e21\u3059 \u30ec\u30b9\u30dd\u30f3\u30b9\u306f\u6587\u5b57\u5217\u3092\u8fd4\u3059Iterable\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 def simple_app ( environ , start_response ): start_response ( '200 OK' , [( 'Content-type' , 'text/plain' )]) return [ 'Hello world! \\n ' ] if __name__ == '__main__' : from wsgiref import simple_server server = simple_server . make_server ( '' , 8080 , application ) server . serve_forever () WSGI\u306b\u95a2\u3059\u308b\u8a73\u7d30\u306f\u4ee5\u4e0b\u306e\u6587\u732e\u3092\u53c2\u7167\uff0e PEP 333 -- Python Web Server Gateway Interface v1.0 | Python.org PEP 3333 -- Python Web Server Gateway Interface v1.0.1 | Python.org WSGI \u306b\u3064\u3044\u3066 \u2014 Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4f5c\u308a\u65b9 in Python \u4f8b\u306e\u30b3\u30fc\u30c9\u306eenviron\u90e8\u5206\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u95a2\u3059\u308b\u69d8\u3005\u306a\u60c5\u5831\u304c\u5165\u308a\uff0c\u305d\u306e\u60c5\u5831\u3092\u9069\u5207\u306bwrap\u3057\u305f\u3082\u306e\u304c WSGIRequest \u3067\u3042\u308b\uff0eenrivon\u90e8\u5206\u306b\u5165\u308b\u60c5\u5831\u306e\u8a73\u7d30\u306f PEP3333 environ-variables \u3092\u53c2\u7167\uff0e\u4ee3\u8868\u7684\u306a\u3082\u306e\u306b\u306f\u4ee5\u4e0b\u304c\u3042\u308b\uff0e \u5909\u6570\u540d \u6982\u8981 REQUEST_METHOD GET\u3084POST\u306e\u3088\u3046\u306bHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u540d\u306e\u6587\u5b57\u5217 PATH_INFO URL\u306eroot\u4ee5\u964d\u306epath QUERY_STRING URL\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6587\u5b57\u5217\u3067URL\u306e?\u4ee5\u964d CONTENT_TYPE HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u542b\u307e\u308c\u308bCOntent-Type\u30d8\u30c3\u30c0\u30fc\u306e\u5024 WSGIRequest\u306e\u5b9f\u88c5 \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u306e\u7701\u7565\u306a\u3069\u306f\u3042\u308b\u304c\uff0cWSGI\u304b\u3089\u6e21\u3055\u308c\u308benviron\u304b\u3089 PATH_INFO \u3084 REUQEST_METHOD \u306a\u3069\u306e\u5024\u3092\u30d1\u30fc\u30b9\u3057\u3066\u9069\u5207\u306b\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3078\u843d\u3068\u3057\u8fbc\u3093\u3067\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\uff0e class WSGIRequest ( HttpRequest ): def __init__ ( self , environ ): script_name = get_script_name ( environ ) path_info = get_path_info ( environ ) or '/' self . environ = environ self . path_info = path_info self . path = ' %s / %s ' % ( script_name . rstrip ( '/' ), path_info . replace ( '/' , '' , 1 )) self . META = environ self . META [ 'PATH_INFO' ] = path_info self . META [ 'SCRIPT_NAME' ] = script_name self . method = environ [ 'REQUEST_METHOD' ] . upper () self . _set_content_type_params ( environ ) try : content_length = int ( environ . get ( 'CONTENT_LENGTH' )) except ( ValueError , TypeError ): content_length = 0 self . _stream = LimitedStream ( self . environ [ 'wsgi.input' ], content_length ) self . _read_started = False self . resolver_match = None def _get_scheme ( self ): return self . environ . get ( 'wsgi.url_scheme' ) @cached_property def GET ( self ): raw_query_string = get_bytes_from_wsgi ( self . environ , 'QUERY_STRING' , '' ) return QueryDict ( raw_query_string , encoding = self . _encoding ) def _get_post ( self ): if not hasattr ( self , '_post' ): self . _load_post_and_files () return self . _post def _set_post ( self , post ): self . _post = post @cached_property def COOKIES ( self ): raw_cookie = get_str_from_wsgi ( self . environ , 'HTTP_COOKIE' , '' ) return parse_cookie ( raw_cookie ) @property def FILES ( self ): if not hasattr ( self , '_files' ): self . _load_post_and_files () return self . _files POST = property ( _get_post , _set_post ) Django\u3067\u306f\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u521d\u671f\u5316\u3055\u308c\u305f HTTPRequest \u30af\u30e9\u30b9\u3092\u7528\u3044\u3066\u9069\u5207\u306bHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u60c5\u5831\u3092\u5229\u7528\u3057\u306a\u304c\u3089\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b\uff0e Django QueryDict Django\u306eHTTPRequest\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bGET\u3068POST\u3068\u3044\u3046\u30e1\u30f3\u30d0\u30fc\u3092\u6301\u3061\uff0c\u305d\u308c\u305e\u308c django.http.QueryDict \u3068\u3044\u3046\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u6301\u3064\uff0e QueryDict \u306fdict\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3042\u308b\u305f\u3081\u4f7f\u3044\u52dd\u624b\u306f\u5927\u304d\u304f\u306f\u5909\u308f\u3089\u306a\u3044\u304c\uff0c\u5c11\u3057\u7656\u304c\u3042\u308b\u305f\u3081\u672c\u7bc0\u3067\u306f\u3053\u306e QueryDict \u306b\u3064\u3044\u3066\u89e3\u8aac\u3059\u308b\uff0e class HttpRequest : _encoding = None _upload_handlers = [] def __init__ ( self ): self . GET = QueryDict ( mutable = True ) self . POST = QueryDict ( mutable = True ) QueryDict \u306f django.utils.datastructures.MultiValueDict \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3042\u308a\uff0c\u57fa\u672c\u7684\u306a\u6319\u52d5\u306f MultiValueDict \u306b\u6e96\u305a\u308b\uff0e QueryDict \u306b\u7279\u6709\u306e\u6a5f\u80fd\u3068\u3057\u3066\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u3067mutable\u3068immutable\u306e\u5207\u308a\u66ff\u3048\u304c\u3067\u304d\u308b\u70b9\u3068dict\u306eset\u6642\u306bbytes\u578b\u3092str\u578b\u306b\u5909\u63db\u51fa\u6765\u308b\u70b9\u304c\u3042\u308b\uff0e\u3053\u308c\u306b\u3088\u3063\u3066bytes\u3067\u3084\u308a\u3068\u308a\u3055\u308c\u308bHTTP\u901a\u4fe1\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3088\u3057\u306a\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\uff0e immutable\u306e\u5b9f\u88c5\u306b\u306f _assert_mutable \u95a2\u6570\u304c\u5229\u7528\u3055\u308c\u3066\u304a\u308a\uff0c\u5024\u3092\u5909\u66f4\u3059\u308b\u51e6\u7406\u306e\u524d\u306b _assert_mutable \u3092\u5165\u308c\u3066\u3044\u308b\uff0e class QueryDict ( MultiValueDict ): def __init__ ( self , query_string = None , mutable = False , encoding = None ): super () . __init__ () ... self . _mutable = mutable ... def _assert_mutable ( self ): if not self . _mutable : raise AttributeError ( \"This QueryDict instance is immutable\" ) \u4f8b\u3048\u3070\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b __setitem__ \u3084\u8981\u7d20\u3092\u524a\u9664\u3059\u308b __delitem__ \u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b _assert_mutable \u306e\u5b9f\u884c\u5f8c\u306b\u5909\u66f4\u51e6\u7406\u3092\u884c\u3046\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e def __setitem__ ( self , key , value ): self . _assert_mutable () key = bytes_to_text ( key , self . encoding ) value = bytes_to_text ( value , self . encoding ) super () . __setitem__ ( key , value ) def __delitem__ ( self , key ): self . _assert_mutable () super () . __delitem__ ( key ) Django\u306eMultiValueDict QueryDict \u306e\u3088\u308a\u8a73\u7d30\u306a\u5b9f\u614b\u3092\u77e5\u308b\u305f\u3081\u305d\u306e\u7d99\u627f\u5143\u306e\u30af\u30e9\u30b9\u3067\u3042\u308b MultiValueDict \u306e\u5b9f\u88c5\u3092\u898b\u3066\u3044\u304f\uff0e Django Rest Framework\u306eRequest\u30af\u30e9\u30b9 Under construction.","title":"Request"},{"location":"request/#request","text":"\u66f4\u65b0\u65e5 2020-11-27 Django v3.1.3 Django Rest Framework v3.12.2","title":"Request"},{"location":"request/#djangorequest","text":"Django\u306f\u53d7\u4fe1\u3057\u305fHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092 django.http.request.HTTPRequest \u3067\u53d7\u3051\u53d6\u308a\uff0c\u305d\u308c\u3092\u3082\u3068\u306bView\u3067\u306e\u51e6\u7406\u3092\u884c\u3046\uff0e Django\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308bAPI\u5b9f\u88c5\u306e\u4f8b\u304c\u4ee5\u4e0b\u306e\u300c\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308a\uff0c\u73fe\u5728\u6642\u523b\u3092\u542b\u3080html\u3092\u8fd4\u3059\u300d\u95a2\u6570\u3067\u3042\u308b\uff0e\u3053\u306e\u95a2\u6570\u306e\u5f15\u6570request\u306b\u5165\u308bHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u4e2d\u8eab\u3053\u305d\u304cDjango\u306e HTTPRequest \u3067\u3042\u308a\uff0cHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u4e2d\u8eab\u3092\u30d1\u30fc\u30b9\u3057\u3066Python\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u307e\u3068\u3081\u3042\u3052\u305f\u3082\u306e\u3067\u3042\u308b\uff0e from django.http import HttpResponse import datetime def current_datetime ( request ): now = datetime . datetime . now () html = \"<html><body>It is now %s .</body></html>\" % now return HttpResponse ( html ) HTTPRequest \u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u306b\u95a2\u3059\u308b\u8a73\u7d30\u306f \u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3092\u53c2\u7167\uff0e","title":"Django\u306eRequest\u30af\u30e9\u30b9"},{"location":"request/#djangowsgirequestrequest","text":"Django\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f PEP333 \u3067\u5b9a\u3081\u3089\u308c\u305fWSGI\u3068\u3044\u3046\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4ecb\u3057\u3066\u30b5\u30fc\u30d0\u30fc\u3068\u306e\u3084\u308a\u3068\u308a\u3092\u884c\u3046\uff0e\u305d\u306e\u969b\u306b\u5229\u7528\u3055\u308c\u308b\u306e\u304cDjango\u306e WSGIRequest \u3067\u3042\u308a WSGIServer \u3067\u3042\u308b\uff0e\u307e\u305f WSGIRequest \u306f HTTPRequest \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3042\u308b\uff0e WSGI\u306e\u4ed5\u69d8\u3092\u7c21\u5358\u306a\u30b3\u30fc\u30c9\u3092\u7528\u3044\u3066\u78ba\u8a8d\u3059\u308b\uff0e environ \u3068 start_response \u3068\u3044\u30462\u3064\u306e\u5f15\u6570\u3092\u6301\u3063\u305fCallable\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u7b2c2\u5f15\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u547c\u3073\u51fa\u3057\u3066status code\u3068header\u3092\u6e21\u3059 \u30ec\u30b9\u30dd\u30f3\u30b9\u306f\u6587\u5b57\u5217\u3092\u8fd4\u3059Iterable\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 def simple_app ( environ , start_response ): start_response ( '200 OK' , [( 'Content-type' , 'text/plain' )]) return [ 'Hello world! \\n ' ] if __name__ == '__main__' : from wsgiref import simple_server server = simple_server . make_server ( '' , 8080 , application ) server . serve_forever () WSGI\u306b\u95a2\u3059\u308b\u8a73\u7d30\u306f\u4ee5\u4e0b\u306e\u6587\u732e\u3092\u53c2\u7167\uff0e PEP 333 -- Python Web Server Gateway Interface v1.0 | Python.org PEP 3333 -- Python Web Server Gateway Interface v1.0.1 | Python.org WSGI \u306b\u3064\u3044\u3066 \u2014 Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4f5c\u308a\u65b9 in Python \u4f8b\u306e\u30b3\u30fc\u30c9\u306eenviron\u90e8\u5206\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u95a2\u3059\u308b\u69d8\u3005\u306a\u60c5\u5831\u304c\u5165\u308a\uff0c\u305d\u306e\u60c5\u5831\u3092\u9069\u5207\u306bwrap\u3057\u305f\u3082\u306e\u304c WSGIRequest \u3067\u3042\u308b\uff0eenrivon\u90e8\u5206\u306b\u5165\u308b\u60c5\u5831\u306e\u8a73\u7d30\u306f PEP3333 environ-variables \u3092\u53c2\u7167\uff0e\u4ee3\u8868\u7684\u306a\u3082\u306e\u306b\u306f\u4ee5\u4e0b\u304c\u3042\u308b\uff0e \u5909\u6570\u540d \u6982\u8981 REQUEST_METHOD GET\u3084POST\u306e\u3088\u3046\u306bHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u540d\u306e\u6587\u5b57\u5217 PATH_INFO URL\u306eroot\u4ee5\u964d\u306epath QUERY_STRING URL\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6587\u5b57\u5217\u3067URL\u306e?\u4ee5\u964d CONTENT_TYPE HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u542b\u307e\u308c\u308bCOntent-Type\u30d8\u30c3\u30c0\u30fc\u306e\u5024 WSGIRequest\u306e\u5b9f\u88c5 \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u306e\u7701\u7565\u306a\u3069\u306f\u3042\u308b\u304c\uff0cWSGI\u304b\u3089\u6e21\u3055\u308c\u308benviron\u304b\u3089 PATH_INFO \u3084 REUQEST_METHOD \u306a\u3069\u306e\u5024\u3092\u30d1\u30fc\u30b9\u3057\u3066\u9069\u5207\u306b\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3078\u843d\u3068\u3057\u8fbc\u3093\u3067\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\uff0e class WSGIRequest ( HttpRequest ): def __init__ ( self , environ ): script_name = get_script_name ( environ ) path_info = get_path_info ( environ ) or '/' self . environ = environ self . path_info = path_info self . path = ' %s / %s ' % ( script_name . rstrip ( '/' ), path_info . replace ( '/' , '' , 1 )) self . META = environ self . META [ 'PATH_INFO' ] = path_info self . META [ 'SCRIPT_NAME' ] = script_name self . method = environ [ 'REQUEST_METHOD' ] . upper () self . _set_content_type_params ( environ ) try : content_length = int ( environ . get ( 'CONTENT_LENGTH' )) except ( ValueError , TypeError ): content_length = 0 self . _stream = LimitedStream ( self . environ [ 'wsgi.input' ], content_length ) self . _read_started = False self . resolver_match = None def _get_scheme ( self ): return self . environ . get ( 'wsgi.url_scheme' ) @cached_property def GET ( self ): raw_query_string = get_bytes_from_wsgi ( self . environ , 'QUERY_STRING' , '' ) return QueryDict ( raw_query_string , encoding = self . _encoding ) def _get_post ( self ): if not hasattr ( self , '_post' ): self . _load_post_and_files () return self . _post def _set_post ( self , post ): self . _post = post @cached_property def COOKIES ( self ): raw_cookie = get_str_from_wsgi ( self . environ , 'HTTP_COOKIE' , '' ) return parse_cookie ( raw_cookie ) @property def FILES ( self ): if not hasattr ( self , '_files' ): self . _load_post_and_files () return self . _files POST = property ( _get_post , _set_post ) Django\u3067\u306f\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u521d\u671f\u5316\u3055\u308c\u305f HTTPRequest \u30af\u30e9\u30b9\u3092\u7528\u3044\u3066\u9069\u5207\u306bHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u60c5\u5831\u3092\u5229\u7528\u3057\u306a\u304c\u3089\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b\uff0e","title":"Django\u306eWSGIRequest\u304b\u3089Request\u304c\u30d1\u30fc\u30b9\u3055\u308c\u308b\u6d41\u308c\u3092\u77e5\u308b"},{"location":"request/#django-querydict","text":"Django\u306eHTTPRequest\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bGET\u3068POST\u3068\u3044\u3046\u30e1\u30f3\u30d0\u30fc\u3092\u6301\u3061\uff0c\u305d\u308c\u305e\u308c django.http.QueryDict \u3068\u3044\u3046\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u6301\u3064\uff0e QueryDict \u306fdict\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3042\u308b\u305f\u3081\u4f7f\u3044\u52dd\u624b\u306f\u5927\u304d\u304f\u306f\u5909\u308f\u3089\u306a\u3044\u304c\uff0c\u5c11\u3057\u7656\u304c\u3042\u308b\u305f\u3081\u672c\u7bc0\u3067\u306f\u3053\u306e QueryDict \u306b\u3064\u3044\u3066\u89e3\u8aac\u3059\u308b\uff0e class HttpRequest : _encoding = None _upload_handlers = [] def __init__ ( self ): self . GET = QueryDict ( mutable = True ) self . POST = QueryDict ( mutable = True ) QueryDict \u306f django.utils.datastructures.MultiValueDict \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3042\u308a\uff0c\u57fa\u672c\u7684\u306a\u6319\u52d5\u306f MultiValueDict \u306b\u6e96\u305a\u308b\uff0e QueryDict \u306b\u7279\u6709\u306e\u6a5f\u80fd\u3068\u3057\u3066\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u3067mutable\u3068immutable\u306e\u5207\u308a\u66ff\u3048\u304c\u3067\u304d\u308b\u70b9\u3068dict\u306eset\u6642\u306bbytes\u578b\u3092str\u578b\u306b\u5909\u63db\u51fa\u6765\u308b\u70b9\u304c\u3042\u308b\uff0e\u3053\u308c\u306b\u3088\u3063\u3066bytes\u3067\u3084\u308a\u3068\u308a\u3055\u308c\u308bHTTP\u901a\u4fe1\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3088\u3057\u306a\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\uff0e immutable\u306e\u5b9f\u88c5\u306b\u306f _assert_mutable \u95a2\u6570\u304c\u5229\u7528\u3055\u308c\u3066\u304a\u308a\uff0c\u5024\u3092\u5909\u66f4\u3059\u308b\u51e6\u7406\u306e\u524d\u306b _assert_mutable \u3092\u5165\u308c\u3066\u3044\u308b\uff0e class QueryDict ( MultiValueDict ): def __init__ ( self , query_string = None , mutable = False , encoding = None ): super () . __init__ () ... self . _mutable = mutable ... def _assert_mutable ( self ): if not self . _mutable : raise AttributeError ( \"This QueryDict instance is immutable\" ) \u4f8b\u3048\u3070\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b __setitem__ \u3084\u8981\u7d20\u3092\u524a\u9664\u3059\u308b __delitem__ \u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b _assert_mutable \u306e\u5b9f\u884c\u5f8c\u306b\u5909\u66f4\u51e6\u7406\u3092\u884c\u3046\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e def __setitem__ ( self , key , value ): self . _assert_mutable () key = bytes_to_text ( key , self . encoding ) value = bytes_to_text ( value , self . encoding ) super () . __setitem__ ( key , value ) def __delitem__ ( self , key ): self . _assert_mutable () super () . __delitem__ ( key )","title":"Django QueryDict"},{"location":"request/#djangomultivaluedict","text":"QueryDict \u306e\u3088\u308a\u8a73\u7d30\u306a\u5b9f\u614b\u3092\u77e5\u308b\u305f\u3081\u305d\u306e\u7d99\u627f\u5143\u306e\u30af\u30e9\u30b9\u3067\u3042\u308b MultiValueDict \u306e\u5b9f\u88c5\u3092\u898b\u3066\u3044\u304f\uff0e","title":"Django\u306eMultiValueDict"},{"location":"request/#django-rest-frameworkrequest","text":"Under construction.","title":"Django Rest Framework\u306eRequest\u30af\u30e9\u30b9"},{"location":"views/","text":"Django Rest Framework\u306b\u3088\u308bAPI\u306e\u5b9f\u88c5 \u66f4\u65b0\u65e5 2020-11-23 Django v3.1.3 Django Rest Framework v3.12.2 Django Rest Framework\u3067\u306f\u4e3b\u306b rest_framework.views.APIView \u3092\u7d99\u627f\u3057\u305fview\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067API\u306e\u5b9f\u88c5\u3092\u884c\u3046\uff0e\u307e\u305f\u5225\u306e\u65b9\u6cd5\u3068\u3057\u3066\u95a2\u6570\u578b\u306eview\u3092\u4f5c\u6210\u3059\u308b rest_framework.decorators.api_view \u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308b\u304c\uff0c\u3053\u3061\u3089\u306f APIView \u3092\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u4f7f\u3048\u308b\u5f62\u306b\u3057\u305f\u3082\u306e\u3067\u3042\u308b\u305f\u3081\u8a73\u7d30\u306a\u8aac\u660e\u306f\u7701\u7565\u3059\u308b\uff0e APIView APIView \u306fdjango\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b django.views.generic.View \u3092\u7d99\u627f\u3057\u3066\u62e1\u5f35\u3057\u305f\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u308b\uff0e\u4e3b\u306a\u9055\u3044\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u70b9\u304c\u6319\u3052\u3089\u308c\u308b\uff0e view\u306ehandler\u306b django.http.request.HttpRequest \u3067\u306f\u306a\u304f rest_framework.request.Request \u304c\u6e21\u3055\u308c\u308b view\u306ehandler\u304c django.http.response.HTTPResponse \u3067\u306f\u306a\u304f rest_framework.response.Response \u3092\u8fd4\u3059 permission_classes \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u306b\u6a29\u9650\u306b\u95a2\u3059\u308bclass\u3092\u6e21\u3059\u3053\u3068\u3067\u7c21\u5358\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fc5\u8981\u306a\u6a29\u9650\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b rest_framework\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306eAPIView\u3092\u7528\u3044\u305f\u5b9f\u88c5\u306e\u4f8b\uff0e\u3053\u306e\u3088\u3046\u306bget\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067User.username\u306b\u5bfe\u3059\u308blist\u3092\u7c21\u5358\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e class ListUsers ( APIView ): authentication_classes = [ authentication . TokenAuthentication ] permission_classes = [ permissions . IsAdminUser ] def get ( self , request , format = None ): usernames = [ user . username for user in User . objects . all ()] return Response ( usernames ) \u4e0a\u8a18\u4f8b\u306e\u3088\u3046\u306bHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306eget\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066 APIView \u306eget\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u308b\u4ed5\u7d44\u307f\u3092\u89e3\u8aac\u3059\u308b\uff0e APIView \u306fdjango\u306e View \u3068\u540c\u69d8\u306b dispatch \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304cHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u3066\uff0cHTTP\u30e1\u30bd\u30c3\u30c9\u306e\u7a2e\u985e\u306b\u5fdc\u3058\u3066\u9069\u5207\u306a\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\uff0e\u73fe\u5728\u306e dispatch \u306e\u51e6\u7406\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u308b\uff0e class APIView ( View ): ... def dispatch ( self , request , * args , ** kwargs ): \"\"\" `.dispatch()` is pretty much the same as Django's regular dispatch, but with extra hooks for startup, finalize, and exception handling. \"\"\" self . args = args self . kwargs = kwargs request = self . initialize_request ( request , * args , ** kwargs ) self . request = request self . headers = self . default_response_headers # deprecate? try : self . initial ( request , * args , ** kwargs ) # Get the appropriate handler method if request . method . lower () in self . http_method_names : handler = getattr ( self , request . method . lower (), self . http_method_not_allowed ) else : handler = self . http_method_not_allowed response = handler ( request , * args , ** kwargs ) except Exception as exc : response = self . handle_exception ( exc ) self . response = self . finalize_response ( request , response , * args , ** kwargs ) return self . response dispatch \u306e\u51e6\u7406\u306e\u5927\u304d\u306a\u6d41\u308c\u306f\u4ee5\u4e0b\u3068\u306a\u3063\u3066\u3044\u308b\uff0e django\u306e HTTPRequest \u3084\u305d\u306e\u4ed6HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u60c5\u5831\u306b\u542b\u307e\u308c\u308b\u60c5\u5831\u3092\u53d7\u3051\u53d6\u308a\uff0crest_framework\u306e Request \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b initial \u30e1\u30bd\u30c3\u30c9\u5185\u3067permission\u306e\u30c1\u30a7\u30c3\u30af\u306a\u3069\u3092\u884c\u3046 \u6307\u5b9a\u3055\u308c\u305fhttp\u30e1\u30bd\u30c3\u30c9\u306ehandler\u3092\u53d6\u308a\u51fa\u3057\uff0c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f self.http_method_not_allowed \u3067405\u30a8\u30e9\u30fc\u3092\u8fd4\u3059 rest_framework.exceptions.MethodNotAllowed \u3092handler\u3068\u3057\u3066\u53d6\u5f97\u3059\u308b handler\u5185\u90e8\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\uff0c\u623b\u308a\u5024\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u305f Response \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3059 \u305d\u306e\u305f\u3081 APIView \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067get\u3084post\u306a\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u3058\u305f\u9069\u5207\u306a\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e GenericAPIView\u3068ViewSet rest_framework\u3067DB\u306b\u7d10\u3065\u304f\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b\u5834\u5408\u306f rest_framework.generics.GenericAPIView \u3092\u5229\u7528\u3059\u308b\uff0e GenericAPIView \u306f rest_framework.views.APIView \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3042\u308a\uff0cAPI\u3092\u5b9f\u88c5\u3057\u305f\u3044DB\u306e queryset \u3068\u305d\u308c\u3092json\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306e serializer_class \u30e1\u30f3\u30d0\u3092\u6301\u3064\uff0e \u4f8b\u3048\u3070 rest_framework.viewsets.ModelViewSet \u3092\u5229\u7528\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067DB\u30e2\u30c7\u30eb\u306b\u5bfe\u3059\u308b\u69d8\u3005\u306a\u51e6\u7406\u3092\u5b9f\u88c5\u3067\u304d\u308b\uff0e(serializer\u306b\u95a2\u3059\u308b\u8aac\u660e\u306f\u7701\u7565) class UserViewSet ( viewsets . ModelViewSet ): serializer_class = UserSerializer queryset = User . objects . all () \u4e0a\u8a18\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u3055\u308c\u308b\u51e6\u7406\u306e\u4e00\u89a7\uff0e \u30e1\u30bd\u30c3\u30c9\u540d \u51e6\u7406 list \u5168\u4ef6\u53d6\u5f97 retrive 1\u4ef6\u53d6\u5f97 create \u4f5c\u6210 update \u66f4\u65b0 partial_update \u90e8\u5206\u66f4\u65b0 destroy \u524a\u9664 \u4e0a\u8a18\u4f8b\u306e\u30b3\u30fc\u30c9\u4e2d\u3067\u51fa\u3066\u304d\u305f rest_framework.viewsets.ModelViewSet \u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\uff0e class ModelViewSet ( mixins . CreateModelMixin , mixins . RetrieveModelMixin , mixins . UpdateModelMixin , mixins . DestroyModelMixin , mixins . ListModelMixin , GenericViewSet ): pass \u7d99\u627f\u5143\u3068\u306a\u3063\u3066\u3044\u308b\u8907\u6570\u306emixin\u304c\u305d\u308c\u305e\u308c\u306eDB\u306b\u95a2\u9023\u3059\u308b\u51e6\u7406\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u304a\u308a\uff0c\u3053\u308c\u3089\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u3067DB\u306b\u95a2\u9023\u3059\u308b\u51e6\u7406\u3092\u9069\u5207\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\u4f8b\u3048\u3070create\u3068retrive\u4ee5\u5916\u306f\u4e0d\u8981\u306a\u72b6\u6cc1\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067create\u3068retrieve\u306e\u307f\u306e\u51e6\u7406\u3092\u6301\u3063\u305fViewSet\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e class UserViewSet ( mixins . CreateModelMixin , mixins . RetrieveModelMixin , viewsets . GenericViewSet ): serializer_class = UserSerializer queryset = User . objects . all () \u305d\u308c\u305e\u308c\u306emixin\u30af\u30e9\u30b9\u304c\u3069\u306e\u3088\u3046\u306bqueryset\u3068serializer\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u304b\u306e\u8a73\u7d30\u306f GitHub \u3092\u53c2\u7167\uff0e\u672c\u8a18\u4e8b\u3067\u306f\u4f8b\u3068\u3057\u3066 rest_framework.mixins.RetriveModelMixin \u306e\u5b9f\u88c5\u306e\u307f\u78ba\u8a8d\u3059\u308b\uff0e class RetrieveModelMixin : def retrieve ( self , request , * args , ** kwargs ): instance = self . get_object () serializer = self . get_serializer ( instance ) return Response ( serializer . data ) get_object() \u3067queryset\u30e1\u30f3\u30d0\u304b\u3089\u9069\u5207\u306afiltering\u51e6\u7406\u5f8c\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b \u53d6\u5f97\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092serializer\u3067json\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b Response \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3059 mixin\u3068\u3057\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u305f\u3044\u5834\u5408\u306f\u9069\u5207\u306a\u30e1\u30bd\u30c3\u30c9\u540d\u306b\u5bfe\u3057\u3066\u81ea\u8eab\u3067\u30b3\u30fc\u30c9\u3092\u5b9f\u88c5\u3059\u308c\u3070APIView\u306ediapatch\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u9069\u5207\u306a\u547c\u3073\u51fa\u3057\u3092\u884c\u3063\u3066\u304f\u308c\u308b\uff0e(\u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306bDB\u306b\u5168\u304f\u95a2\u4fc2\u306e\u306a\u3044\u4f55\u3082\u3057\u306a\u3044\u51e6\u7406\u3092\u66f8\u3044\u3066\u3082\u3044\u3044) class UserViewSet ( viewsets . GenericViewSet ): serializer_class = UserSerializer queryset = User . objects . all () def create ( self , request , * args , ** kwargs ): return Response ({ 'msg' : 'Do nothing.' })","title":"Views"},{"location":"views/#django-rest-frameworkapi","text":"\u66f4\u65b0\u65e5 2020-11-23 Django v3.1.3 Django Rest Framework v3.12.2 Django Rest Framework\u3067\u306f\u4e3b\u306b rest_framework.views.APIView \u3092\u7d99\u627f\u3057\u305fview\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067API\u306e\u5b9f\u88c5\u3092\u884c\u3046\uff0e\u307e\u305f\u5225\u306e\u65b9\u6cd5\u3068\u3057\u3066\u95a2\u6570\u578b\u306eview\u3092\u4f5c\u6210\u3059\u308b rest_framework.decorators.api_view \u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308b\u304c\uff0c\u3053\u3061\u3089\u306f APIView \u3092\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u4f7f\u3048\u308b\u5f62\u306b\u3057\u305f\u3082\u306e\u3067\u3042\u308b\u305f\u3081\u8a73\u7d30\u306a\u8aac\u660e\u306f\u7701\u7565\u3059\u308b\uff0e","title":"Django Rest Framework\u306b\u3088\u308bAPI\u306e\u5b9f\u88c5"},{"location":"views/#apiview","text":"APIView \u306fdjango\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b django.views.generic.View \u3092\u7d99\u627f\u3057\u3066\u62e1\u5f35\u3057\u305f\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u308b\uff0e\u4e3b\u306a\u9055\u3044\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u70b9\u304c\u6319\u3052\u3089\u308c\u308b\uff0e view\u306ehandler\u306b django.http.request.HttpRequest \u3067\u306f\u306a\u304f rest_framework.request.Request \u304c\u6e21\u3055\u308c\u308b view\u306ehandler\u304c django.http.response.HTTPResponse \u3067\u306f\u306a\u304f rest_framework.response.Response \u3092\u8fd4\u3059 permission_classes \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u306b\u6a29\u9650\u306b\u95a2\u3059\u308bclass\u3092\u6e21\u3059\u3053\u3068\u3067\u7c21\u5358\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fc5\u8981\u306a\u6a29\u9650\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b rest_framework\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306eAPIView\u3092\u7528\u3044\u305f\u5b9f\u88c5\u306e\u4f8b\uff0e\u3053\u306e\u3088\u3046\u306bget\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067User.username\u306b\u5bfe\u3059\u308blist\u3092\u7c21\u5358\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e class ListUsers ( APIView ): authentication_classes = [ authentication . TokenAuthentication ] permission_classes = [ permissions . IsAdminUser ] def get ( self , request , format = None ): usernames = [ user . username for user in User . objects . all ()] return Response ( usernames ) \u4e0a\u8a18\u4f8b\u306e\u3088\u3046\u306bHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306eget\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066 APIView \u306eget\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u308b\u4ed5\u7d44\u307f\u3092\u89e3\u8aac\u3059\u308b\uff0e APIView \u306fdjango\u306e View \u3068\u540c\u69d8\u306b dispatch \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304cHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u3066\uff0cHTTP\u30e1\u30bd\u30c3\u30c9\u306e\u7a2e\u985e\u306b\u5fdc\u3058\u3066\u9069\u5207\u306a\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\uff0e\u73fe\u5728\u306e dispatch \u306e\u51e6\u7406\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u308b\uff0e class APIView ( View ): ... def dispatch ( self , request , * args , ** kwargs ): \"\"\" `.dispatch()` is pretty much the same as Django's regular dispatch, but with extra hooks for startup, finalize, and exception handling. \"\"\" self . args = args self . kwargs = kwargs request = self . initialize_request ( request , * args , ** kwargs ) self . request = request self . headers = self . default_response_headers # deprecate? try : self . initial ( request , * args , ** kwargs ) # Get the appropriate handler method if request . method . lower () in self . http_method_names : handler = getattr ( self , request . method . lower (), self . http_method_not_allowed ) else : handler = self . http_method_not_allowed response = handler ( request , * args , ** kwargs ) except Exception as exc : response = self . handle_exception ( exc ) self . response = self . finalize_response ( request , response , * args , ** kwargs ) return self . response dispatch \u306e\u51e6\u7406\u306e\u5927\u304d\u306a\u6d41\u308c\u306f\u4ee5\u4e0b\u3068\u306a\u3063\u3066\u3044\u308b\uff0e django\u306e HTTPRequest \u3084\u305d\u306e\u4ed6HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u60c5\u5831\u306b\u542b\u307e\u308c\u308b\u60c5\u5831\u3092\u53d7\u3051\u53d6\u308a\uff0crest_framework\u306e Request \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b initial \u30e1\u30bd\u30c3\u30c9\u5185\u3067permission\u306e\u30c1\u30a7\u30c3\u30af\u306a\u3069\u3092\u884c\u3046 \u6307\u5b9a\u3055\u308c\u305fhttp\u30e1\u30bd\u30c3\u30c9\u306ehandler\u3092\u53d6\u308a\u51fa\u3057\uff0c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f self.http_method_not_allowed \u3067405\u30a8\u30e9\u30fc\u3092\u8fd4\u3059 rest_framework.exceptions.MethodNotAllowed \u3092handler\u3068\u3057\u3066\u53d6\u5f97\u3059\u308b handler\u5185\u90e8\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\uff0c\u623b\u308a\u5024\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u305f Response \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3059 \u305d\u306e\u305f\u3081 APIView \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067get\u3084post\u306a\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u3058\u305f\u9069\u5207\u306a\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e","title":"APIView"},{"location":"views/#genericapiviewviewset","text":"rest_framework\u3067DB\u306b\u7d10\u3065\u304f\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b\u5834\u5408\u306f rest_framework.generics.GenericAPIView \u3092\u5229\u7528\u3059\u308b\uff0e GenericAPIView \u306f rest_framework.views.APIView \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3042\u308a\uff0cAPI\u3092\u5b9f\u88c5\u3057\u305f\u3044DB\u306e queryset \u3068\u305d\u308c\u3092json\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306e serializer_class \u30e1\u30f3\u30d0\u3092\u6301\u3064\uff0e \u4f8b\u3048\u3070 rest_framework.viewsets.ModelViewSet \u3092\u5229\u7528\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067DB\u30e2\u30c7\u30eb\u306b\u5bfe\u3059\u308b\u69d8\u3005\u306a\u51e6\u7406\u3092\u5b9f\u88c5\u3067\u304d\u308b\uff0e(serializer\u306b\u95a2\u3059\u308b\u8aac\u660e\u306f\u7701\u7565) class UserViewSet ( viewsets . ModelViewSet ): serializer_class = UserSerializer queryset = User . objects . all () \u4e0a\u8a18\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u3055\u308c\u308b\u51e6\u7406\u306e\u4e00\u89a7\uff0e \u30e1\u30bd\u30c3\u30c9\u540d \u51e6\u7406 list \u5168\u4ef6\u53d6\u5f97 retrive 1\u4ef6\u53d6\u5f97 create \u4f5c\u6210 update \u66f4\u65b0 partial_update \u90e8\u5206\u66f4\u65b0 destroy \u524a\u9664 \u4e0a\u8a18\u4f8b\u306e\u30b3\u30fc\u30c9\u4e2d\u3067\u51fa\u3066\u304d\u305f rest_framework.viewsets.ModelViewSet \u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\uff0e class ModelViewSet ( mixins . CreateModelMixin , mixins . RetrieveModelMixin , mixins . UpdateModelMixin , mixins . DestroyModelMixin , mixins . ListModelMixin , GenericViewSet ): pass \u7d99\u627f\u5143\u3068\u306a\u3063\u3066\u3044\u308b\u8907\u6570\u306emixin\u304c\u305d\u308c\u305e\u308c\u306eDB\u306b\u95a2\u9023\u3059\u308b\u51e6\u7406\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u304a\u308a\uff0c\u3053\u308c\u3089\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u3067DB\u306b\u95a2\u9023\u3059\u308b\u51e6\u7406\u3092\u9069\u5207\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\u4f8b\u3048\u3070create\u3068retrive\u4ee5\u5916\u306f\u4e0d\u8981\u306a\u72b6\u6cc1\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067create\u3068retrieve\u306e\u307f\u306e\u51e6\u7406\u3092\u6301\u3063\u305fViewSet\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e class UserViewSet ( mixins . CreateModelMixin , mixins . RetrieveModelMixin , viewsets . GenericViewSet ): serializer_class = UserSerializer queryset = User . objects . all () \u305d\u308c\u305e\u308c\u306emixin\u30af\u30e9\u30b9\u304c\u3069\u306e\u3088\u3046\u306bqueryset\u3068serializer\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u304b\u306e\u8a73\u7d30\u306f GitHub \u3092\u53c2\u7167\uff0e\u672c\u8a18\u4e8b\u3067\u306f\u4f8b\u3068\u3057\u3066 rest_framework.mixins.RetriveModelMixin \u306e\u5b9f\u88c5\u306e\u307f\u78ba\u8a8d\u3059\u308b\uff0e class RetrieveModelMixin : def retrieve ( self , request , * args , ** kwargs ): instance = self . get_object () serializer = self . get_serializer ( instance ) return Response ( serializer . data ) get_object() \u3067queryset\u30e1\u30f3\u30d0\u304b\u3089\u9069\u5207\u306afiltering\u51e6\u7406\u5f8c\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b \u53d6\u5f97\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092serializer\u3067json\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b Response \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3059 mixin\u3068\u3057\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u305f\u3044\u5834\u5408\u306f\u9069\u5207\u306a\u30e1\u30bd\u30c3\u30c9\u540d\u306b\u5bfe\u3057\u3066\u81ea\u8eab\u3067\u30b3\u30fc\u30c9\u3092\u5b9f\u88c5\u3059\u308c\u3070APIView\u306ediapatch\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u9069\u5207\u306a\u547c\u3073\u51fa\u3057\u3092\u884c\u3063\u3066\u304f\u308c\u308b\uff0e(\u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306bDB\u306b\u5168\u304f\u95a2\u4fc2\u306e\u306a\u3044\u4f55\u3082\u3057\u306a\u3044\u51e6\u7406\u3092\u66f8\u3044\u3066\u3082\u3044\u3044) class UserViewSet ( viewsets . GenericViewSet ): serializer_class = UserSerializer queryset = User . objects . all () def create ( self , request , * args , ** kwargs ): return Response ({ 'msg' : 'Do nothing.' })","title":"GenericAPIView\u3068ViewSet"}]}